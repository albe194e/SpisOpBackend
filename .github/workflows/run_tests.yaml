name: Run Tests

on: push

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up JDK
      - name: Set up JDK 22
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '22'

      # Step 3: Cache Maven dependencies (for Spring Boot)
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Install dependencies for Maven (only if cache is missed)
      - name: Install Maven dependencies
        run: mvn install -DskipTests
        if: steps.cache.outputs.cache-hit != 'true'

      # Step 5: Run Spring Boot Unit Tests using Maven
      - name: Run Unit Tests
        run: mvn test

      # Step 6: Cache Node.js dependencies (for Newman and Postman API tests)
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 7: Install Newman globally (only if cache is missed)
      - name: Install Newman
        run: npm install -g newman
        if: steps.cache.outputs.cache-hit != 'true'

      # Step 7: Run API Tests using Newman (Postman collections)
      #- name: Run API Tests
      #  run: newman run ./path/to/your-api-collection.postman_collection.json \
      #    --env-var "base_url=${{ secrets.PROD_BASE_URL }}" \
      #    --env-var "api_key=${{ secrets.PROD_API_KEY }}"